{"version":3,"sources":["components/Remote.js","App.js","serviceWorker.js","index.js"],"names":["Remote","_this$props","this","props","requestIndex","currentIndex","react","RootStyled","LeftButton","onClick","RightButton","React","styled","div","_templateObject","_templateObject2","_templateObject3","App","state","alpha","beta","gamma","endpoint","socket","socketIOClient","_this","handleOrientation","event","emit","toFixed","setState","index","window","addEventListener","removeEventListener","_this$state","react_default","a","createElement","className","components_Remote","Container","Component","App_templateObject","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iuBASMA,mLACK,IAAAC,EAC8BC,KAAKC,MAAnCC,EADAH,EACAG,aAAcC,EADdJ,EACcI,aAErB,OACEC,EAAA,cAACC,EAAD,KACED,EAAA,cAACE,EAAD,CAAYC,QAAS,kBAAML,EAAaC,EAAe,MACvDC,EAAA,cAACI,EAAD,CACED,QAAS,kBAAML,EAAaC,EAAe,cARhCM,aAcfH,EAAaI,IAAOC,IAAVC,KAMVJ,EAAcE,IAAOC,IAAVE,KAMXR,EAAaK,IAAOC,IAAVG,KAODhB,wICpBTiB,6MACJC,MAAQ,CACNC,MAAO,KACPC,KAAM,KACNC,MAAO,KACPhB,aAAc,KAGhBiB,SAAW,YAEXC,OAASC,IAAeC,EAAKH,YAc7BI,kBAAoB,SAACC,GAAkC,IAC9CR,EAAsBQ,EAAtBR,MAAOC,EAAeO,EAAfP,KAAMC,EAASM,EAATN,MAEpBI,EAAKF,OAAOK,KAAK,WAAY,CAC3BT,MAAOA,EAAMU,QAAQ,GACrBT,KAAMA,EAAKS,QAAQ,GACnBR,MAAOA,EAAMQ,QAAQ,KAGvBJ,EAAKK,SAAS,CACZX,QACAC,OACAC,aAIJjB,aAAe,SAAC2B,GACdN,EAAKK,SAAS,CACZzB,aAAc0B,IAEhBN,EAAKF,OAAOK,KAAK,aAAc,CAC7BG,MAAOA,wFAhCTC,OAAOC,iBAAiB,oBAAqB/B,KAAKwB,mBAElDxB,KAAKqB,OAAOK,KAAK,aAAc,CAC7BG,MAAO,mDAKTC,OAAOE,oBAAoB,oBAAqBhC,KAAKwB,oDA4B9C,IAAAS,EACoCjC,KAAKgB,MAAzCC,EADAgB,EACAhB,MAAOC,EADPe,EACOf,KAAMC,EADbc,EACad,MAAOhB,EADpB8B,EACoB9B,aAE3B,OACE+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAD,CAAQpC,aAAcF,KAAKE,aAAcC,aAAcA,IACvD+B,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAAA,sBAAcnB,GAASA,EAAMU,QAAQ,IACrCO,EAAAC,EAAAC,cAAA,qBAAalB,GAAQA,EAAKS,QAAQ,IAClCO,EAAAC,EAAAC,cAAA,sBAAcjB,GAASA,EAAMQ,QAAQ,aA1D7BlB,IAAM+B,WAiElBD,EAAY7B,IAAOC,IAAV8B,KAMA1B,ICjFK2B,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.253cbe25.chunk.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  requestIndex: (index: number) => void,\n  currentIndex: number,\n};\n\nclass Remote extends React.Component<Props> {\n  render() {\n    const {requestIndex, currentIndex} = this.props;\n\n    return (\n      <RootStyled>\n        <LeftButton onClick={() => requestIndex(currentIndex - 1)}></LeftButton>\n        <RightButton\n          onClick={() => requestIndex(currentIndex + 1)}></RightButton>\n      </RootStyled>\n    );\n  }\n}\n\nconst LeftButton = styled.div`\n  width: 50px;\n  height: 50px;\n  background-color: green;\n`;\n\nconst RightButton = styled.div`\n  width: 50px;\n  height: 50px;\n  background-color: yellow;\n`;\n\nconst RootStyled = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex: 1;\n  width: 100%;\n`;\n\nexport default Remote;\n","// @flow\nimport React from 'react';\nimport './App.css';\nimport styled from '@emotion/styled';\nimport socketIOClient from 'socket.io-client';\n\nimport Remote from './components/Remote';\n\ntype DeviceOrientationEvent = {\n  alpha: number,\n  beta: number,\n  gamma: number,\n  absolute: boolean,\n};\n\ntype State = {\n  alpha: ?number,\n  beta: ?number,\n  gamma: ?number,\n  currentIndex: number,\n};\n\nclass App extends React.Component<*, State> {\n  state = {\n    alpha: null,\n    beta: null,\n    gamma: null,\n    currentIndex: 0,\n  };\n\n  endpoint = '/remote';\n  // endpoint = 'https://172.20.10.7:3001/remote';\n  socket = socketIOClient(this.endpoint);\n\n  componentDidMount() {\n    window.addEventListener('deviceorientation', this.handleOrientation);\n    //this.socket.on('message', data => this.setState({response: data}));\n    this.socket.emit('slideIndex', {\n      index: 0,\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('deviceorientation', this.handleOrientation);\n  }\n\n  handleOrientation = (event: DeviceOrientationEvent) => {\n    const {alpha, beta, gamma} = event;\n\n    this.socket.emit('position', {\n      alpha: alpha.toFixed(2),\n      beta: beta.toFixed(2),\n      gamma: gamma.toFixed(2),\n    });\n\n    this.setState({\n      alpha,\n      beta,\n      gamma,\n    });\n  };\n\n  requestIndex = (index: number) => {\n    this.setState({\n      currentIndex: index,\n    });\n    this.socket.emit('slideIndex', {\n      index: index,\n    });\n  };\n\n  render() {\n    const {alpha, beta, gamma, currentIndex} = this.state;\n    //console.log(response);\n    return (\n      <div className=\"App\">\n        <Remote requestIndex={this.requestIndex} currentIndex={currentIndex} />\n        <Container>\n          <span>alpha: {alpha && alpha.toFixed(2)}</span>\n          <span>beta: {beta && beta.toFixed(2)}</span>\n          <span>gamma: {gamma && gamma.toFixed(2)}</span>\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}