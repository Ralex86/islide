{"version":3,"sources":["containers/SliderApi.js","components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["SliderApi","state","isSuccess","isFetching","isFailure","sliders","_this2","this","fetch","then","res","json","data","setState","_this$state","props","children","React","Component","Slider","renderSlides","slides","slideWidth","length","map","slide","index","react","Slide","key","toString","_this$props","nSlides","RootStyled","Scene","sliderWidth","styled","div","_templateObject","_templateObject2","concat","x","y","_templateObject3","App","alpha","beta","gamma","windowHeight","window","innerHeight","windowWidth","innerWidth","hasWindowResized","screenWidth","screenHeight","slideIndex","screenRef","createRef","endpoint","socket","socketIOClient","_this","updateScreenDimensions","_this$screenRef$curre","current","clientHeight","clientWidth","updateWindowDimensions","console","log","addEventListener","on","removeEventListener","i_x","i_y","react_default","a","createElement","App_RootStyled","Screen","ref","Cursor","containers_SliderApi","components_Slider","App_Slide","slideBackground","Monitoring","toFixed","App_templateObject","App_templateObject2","App_templateObject3","_templateObject4","_templateObject5","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19f0a268.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\n\nexport type SliderType = {\n  id: string,\n  url: string,\n};\n\ntype State = {\n  isSuccess: boolean,\n  isFetching: boolean,\n  isFailure: boolean,\n  sliders: ?Array<SliderType>,\n};\n\ntype Props = {\n  children: Function,\n};\n\nclass SliderApi extends React.Component<Props, State> {\n  state = {\n    isSuccess: true,\n    isFetching: true,\n    isFailure: false,\n    sliders: null,\n  };\n\n  componentDidMount() {\n    fetch('/slides')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({isFetching: false, sliders: data});\n      });\n  }\n\n  render() {\n    const {isSuccess, isFetching, isFailure, sliders} = this.state;\n    if (isFetching) return null;\n    if (isFailure) return null;\n\n    return isSuccess && this.props.children(sliders);\n  }\n}\n\nexport default SliderApi;\n","// @flow\n\nimport * as React from 'react';\nimport styled from '@emotion/styled';\n\ntype ReactElement = React.Element;\n\ntype Props = {\n  slides: Array<ReactElement>,\n  index: number,\n};\n\nclass Slider extends React.Component<Props> {\n  renderSlides = (slides: Array<ReactElement>) => {\n    const slideWidth = 100 / slides.length;\n    return slides.map((slide, index) => (\n      <Slide slideWidth={slideWidth} key={index.toString()}>\n        {slide}\n      </Slide>\n    ));\n  };\n\n  render() {\n    const {slides, index} = this.props;\n    const nSlides = slides.length;\n    return (\n      <RootStyled>\n        <Scene index={index} sliderWidth={nSlides * 100}>\n          {this.renderSlides(slides)}\n        </Scene>\n      </RootStyled>\n    );\n  }\n}\n\nconst Slide = styled.div`\n  width: ${props => props.slideWidth}%;\n\n  margin: 4px;\n\n  // background-color: blue;\n`;\n\nconst Scene = styled.div`\n\tposition: relative;\n\tleft: ${props => -props.index * 100}%;\n  display: flex;\n  width: ${props => props.sliderWidth}%;\n\theight: 100%;\n\n\ttransition: left 0.5s ease-in-out;\n\t\n  // transform: ${props => `translate3d(${props.x}px,${props.y}px,0)`};\n`;\n\nconst RootStyled = styled.div`\n  height: 100%;\n  width: 100%;\n\n  position: relative;\n  z-index: 0;\n\n  background-color: red;\n`;\n\nexport default Slider;\n","import React from 'react';\nimport './App.css';\nimport styled from '@emotion/styled';\nimport socketIOClient from 'socket.io-client';\n\n// import Carousel from './components/Carousel';\nimport SliderApi from './containers/SliderApi';\nimport Slider from './components/Slider';\n// import slide1 from './assets/1.jpg';\n// import slide2 from './assets/2.jpg';\n// import slide3 from './assets/3.jpg';\n// import slide4 from './assets/4.jpg';\n// import slide5 from './assets/5.jpg';\n\nclass App extends React.Component {\n  state = {\n    alpha: null,\n    beta: null,\n    gamma: null,\n    x: 0,\n    y: 0,\n    windowHeight: window.innerHeight,\n    windowWidth: window.innerWidth,\n    hasWindowResized: false,\n    screenWidth: 0,\n    screenHeight: 0,\n    slideIndex: 0,\n  };\n\n  screenRef = React.createRef();\n  endpoint = '/screen';\n  socket = socketIOClient(this.endpoint);\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n\n    this.socket.on('position', data => {\n      const {alpha, beta, gamma, x, y} = data;\n      this.setState({alpha, beta, gamma, x, y});\n    });\n\n    this.socket.on('slideIndex', data => {\n      // const {index} = data;\n      console.log('iscreen', data);\n      this.setState({slideIndex: data});\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateScreenDimensions = () => {\n    const {\n      current: {clientHeight, clientWidth},\n    } = this.screenRef;\n\n    this.setState({\n      screenWidth: clientWidth,\n      screenHeight: clientHeight,\n    });\n  };\n\n  updateWindowDimensions = () => {\n    console.log('update');\n    this.setState(\n      {\n        windowHeight: window.innerHeight,\n        windowWidth: window.innerWidth,\n      },\n      () => this.updateScreenDimensions(),\n    );\n  };\n\n  // getSlides = () => {\n  // const slides = [\n  // {id: 1, url: slide1},\n  // {id: 2, url: slide2},\n  // {id: 3, url: slide3},\n  // {id: 4, url: slide4},\n  // {id: 5, url: slide5},\n  // ];\n  // return slides.map((slide, index) => (\n  // <Slide key={index.toString()} slideBackground={slide.url} />\n  // ));\n  // };\n\n  render() {\n    const {\n      alpha,\n      beta,\n      gamma,\n      x,\n      y,\n      screenWidth,\n      screenHeight,\n      slideIndex,\n    } = this.state;\n    const i_x = (screenWidth * x) / 200 + screenWidth / 2;\n    const i_y = (screenHeight * y) / 200 + screenHeight / 2;\n\n    return (\n      <RootStyled>\n        <Screen ref={this.screenRef}>\n          <Cursor x={i_x} y={i_y} />\n          <SliderApi>\n            {slides => (\n              <Slider\n                index={slideIndex}\n                slides={slides.map(slide => (\n                  <Slide key={slide} slideBackground={slide} />\n                ))}\n              />\n            )}\n          </SliderApi>\n        </Screen>\n        <Monitoring>\n          <span>alpha: {alpha}</span>\n          <span>beta: {beta}</span>\n          <span>gamma: {gamma}</span>\n          <span>x: {x.toFixed(2)}</span>\n          <span>y: {y.toFixed(2)}</span>\n        </Monitoring>\n      </RootStyled>\n    );\n  }\n}\n\nconst Slide = styled.div`\n  height: 100%;\n  background-size: cover;\n  background-image: url(${props => props.slideBackground});\n`;\n\nconst Monitoring = styled.div`\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  display: flex;\n  flex-direction: column;\n  width: 100px;\n  color: white;\n  background: rgba(0, 0, 0, 0.6);\n`;\n\nconst Cursor = styled.div`\n  position: absolute;\n  z-index: 999;\n  top: 0;\n  left: 0;\n  width: 20px;\n  height: 20px;\n  background: red;\n  border-radius: 100%;\n  user-select: none;\n  transform: ${props => `translate3d(${props.x}px,${props.y}px,0)`};\n`;\n\nconst Screen = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  position: relative;\n  width: calc(100% - 80px);\n  height: calc(100% - 80px);\n\n  border: 5px solid #ccc;\n  border-radius: 10px;\n  box-sizing: border-box;\n`;\n\nconst RootStyled = styled.div`\n  position: relative;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  // background-color: ;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}